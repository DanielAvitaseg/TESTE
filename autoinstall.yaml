autoinstall:
    version: 1
    identity:
        realname: 'Daniel Avita'
        hostname: ubuntu-desktop
        username: danielavita
        password: '$y$j9T$uhkxlm8nUQaNu.6rl4k2d.$DIldpYy96OHg8lFjfXfc671BZcGWkPOmaDONGAhGSg3'
    locale: pt_BR.utf8
    keyboard:
        layout: br
    timezone: "America/Sao_Paulo"
    
    # --- CONFIGURAÇÃO CORRIGIDA DE STORAGE (NVME0N1 LVM SOBRE LUKS) ---
    storage:
        config:
            # 1. Configura o disco principal
            - ptable: gpt
              path: /dev/nvme0n1
              wipe: superblock-recursive
              preserve: false
              grub_device: true
              type: disk
              id: disk-nvme
            # 2. Partição EFI (512MB)
            - device: disk-nvme
              size: 536870912
              flag: boot
              number: 1
              preserve: false
              type: partition
              id: partition-efi
            - fstype: fat32
              volume: partition-efi
              type: format
              id: format-efi
            - path: /boot/efi
              device: format-efi
              type: mount
              id: mount-efi
            # 3. Partição /boot (1GB)
            - device: disk-nvme
              size: 1073741824
              number: 2
              preserve: false
              type: partition
              id: partition-boot
            - fstype: ext4
              volume: partition-boot
              type: format
              id: format-boot
            - path: /boot
              device: format-boot
              type: mount
              id: mount-boot
            # 4. Partição LUKS (Usa o máximo restante)
            - device: disk-nvme
              size: max 
              number: 3
              preserve: false
              type: partition
              id: partition-luks
            - dm_name: nvme-luks
              key: '$y$j9T$CG1oplP.KXZCCrCYWZKdU1$.JDiEfu46VuTAWOghtNz.Yv2XJrXufE/b8my4pKDHxA'
              volume: partition-luks
              type: crypt
              id: crypt-luks
            # 5. Volume Group (VG) LVM dentro do contêiner LUKS
            - volume: crypt-luks
              preserve: false
              type: lvm_volgroup
              id: vg-system
              name: vg-system
            # 6. Logical Volume (LV) para swap (4GB)
            - volgroup: vg-system
              name: lv-swap
              size: 4294967296 # 4GiB
              type: lvm_partition
              id: lv-swap
            - fstype: swap
              volume: lv-swap
              type: format
              id: format-swap
            - device: format-swap
              type: mount
              id: mount-swap
            # 7. Logical Volume (LV) para / (Root - Usa o máximo restante do VG)
            - volgroup: vg-system
              name: lv-root
              size: max
              type: lvm_partition
              id: lv-root
            - fstype: ext4
              volume: lv-root
              type: format
              id: format-root
            - path: /
              device: format-root
              type: mount
              id: mount-root

    packages:
        # Docker e dependências
        - docker.io
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        # Outros pacotes
        - libreoffice
        - gimp
        - git
        - wget
    snaps:
        - name: spotify
          channel: stable
          classic: false
        - name: postman
          channel: stable
          classic: false
        - name: slack
          channel: stable
          classic: false
        - name: code # VS Code
          channel: stable
          classic: true
        - name: dbeaver-ce
          channel: stable
          classic: false
    codecs:
        install: true
    drivers:
        install: true
    updates: all
    shutdown: reboot
    
    late-commands:
        - |
          # --- Instalação de Programas (Executado como root) ---
          
          # DBeaver
          echo "[INFO] Instalando DBeaver..."
          echo "deb [signed-by=/usr/share/keyrings/dbeaver.gpg] https://dbeaver.io/debs/dbeaver-ce /" | tee /etc/apt/sources.list.d/dbeaver.list
          wget -qO - https://dbeaver.io/debs/dbeaver.gpg.key | gpg --dearmor | tee /usr/share/keyrings/dbeaver.gpg > /dev/null
          apt-get update
          apt-get install -y dbeaver-ce
          
          # Docker
          echo "[INFO] Instalando Docker..."
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor | tee /usr/share/keyrings/docker.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
          apt-get update
          apt-get install -y docker-ce
          systemctl enable docker
          
          # Visual Studio Code
          echo "[INFO] Instalando Visual Studio Code..."
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" | tee /etc/apt/sources.list.d/vscode.list
          apt-get update
          apt-get install -y code
          
          # Postman (Instalação Global)
          echo "[INFO] Instalando Postman..."
          wget https://dl.pstmn.io/download/latest/linux64 -O /tmp/postman.tar.gz
          tar -xzf /tmp/postman.tar.gz -C /opt
          ln -sf /opt/Postman/Postman /usr/bin/postman
          rm /tmp/postman.tar.gz
          
          # Criação do arquivo .desktop (Global)
          cat << EOF > /usr/share/applications/postman.desktop
          [Desktop Entry]
          Type=Application
          Name=Postman
          Icon=/opt/Postman/app/resources/app/assets/icon.png
          Exec="/opt/Postman/Postman"
          Comment=Postman Desktop App
          Categories=Development;Code;
          EOF

          # --- Configuração de Usuário (Executado como danielavita) ---
          
          # Adicionar danielavita ao grupo Docker
          echo "[INFO] Adicionando danielavita ao grupo docker..."
          groupadd docker || true # Cria o grupo se não existir
          usermod -aG docker danielavita
          
          # Instalação do NVM e .NET Core
          echo "[INFO] Instalando NVM e .NET Core para danielavita..."
          su - danielavita -c '
            # NVM
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
            
            # .NET Core
            wget https://dot.net/v1/dotnet-install.sh -O /tmp/dotnet-install.sh && 
            chmod +x /tmp/dotnet-install.sh && 
            /tmp/dotnet-install.sh --channel 6.0 && 
            
            # Configuração do NuGet (usa o binário do home)
            /home/danielavita/.dotnet/dotnet nuget add source https://gitlab.com/api/v4/projects/26749643/packages/nuget/index.json --name Gitlab --username gitlab+deploy-token-982472 --password h4V8PmDAVBzuHNAvsjAz --store-password-in-clear-text
          '
          
          # Link Simbólico Global para .NET (Executado como root, apontando para o home do usuário)
          ln -s /home/danielavita/.dotnet/dotnet /usr/bin/dotnet

          echo "[INFO] Instalação concluída!"
