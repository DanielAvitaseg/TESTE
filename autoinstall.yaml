#cloud-config
autoinstall:
  version: 1
  
  # ====================================================================
  # CONFIGURA√á√ÉO DE ARMAZENAMENTO (MAIS SIMPLES)
  # ====================================================================
  storage:
    wipe: all
    layout:
      name: lvm
      match: 
        path: /dev/nvme0n1
      password: Senhafoda123@ 

  # ====================================================================
  # CONFIGURA√á√ïES DE SISTEMA
  # ====================================================================
  identity:
    hostname: notebook-ubuntu
    username: testuser
    # Usando o hash fornecido anteriormente, que √© o formato mais seguro
    password: "$6$EAyehhfqepzaGX78$k4Qceki0nxJKS2.ZxcWyWjn7db3p7/0Qu.S6pr32pIqVpzfFmwnOj/.XKgY6x3ADG077lE.DoNwMpXZ2aXr3q." 
    
  locale: pt_BR
  timezone: America/Sao_Paulo
  
  keyboard:
    layout: br

  # ====================================================================
  # P√ìS-INSTALA√á√ÉO E A√á√ÉO FINAL
  # ====================================================================
  late-commands:
    # Comandos de atualiza√ß√£o inicial
    - curtin in-target -- apt update
    - curtin in-target -- apt upgrade -y
    
    # ===================================================================
    # IN√çCIO DA INSTALA√á√ÉO DAS FERRAMENTAS DE DESENVOLVIMENTO
    # (TODOS OS COMANDOS S√ÉO ENCAPSULADOS POR 'curtin in-target --')
    # ===================================================================

    - curtin in-target -- echo "üõ†Ô∏è Iniciando a instala√ß√£o das ferramentas de desenvolvimento..."

    # --- 1. PREPARA√á√ÉO GERAL (CURL GARANTIDO) ---
    - curtin in-target -- echo "--- 1. Preparando o sistema (Update e pacotes base, incluindo curl) ---"
    # O 'apt update' e 'apt upgrade' j√° foram feitos acima, mas os pacotes base s√£o importantes
    - curtin in-target -- sudo apt install -y apt-transport-https ca-certificates curl software-properties-common wget gpg lsb-release

    # --- 2. INSTALA√á√ÉO DO DBEAVER CE ---
    - curtin in-target -- echo "--- 2. Instalando DBeaver CE ---"
    - curtin in-target -- echo "deb https://dbeaver.io/debs/dbeaver-ce /" | sudo tee /etc/apt/sources.list.d/dbeaver.list > /dev/null
    # Nota: A maneira de adicionar a chave GPG foi adaptada para ser amig√°vel ao curtin/tee
    - curtin in-target -- wget -O - https://dbeaver.io/debs/dbeaver.gpg.key | gpg --dearmor | sudo tee /etc/apt/keyrings/dbeaver.gpg > /dev/null
    - curtin in-target -- apt update
    - curtin in-target -- apt install -y dbeaver-ce

    # --- 3. INSTALA√á√ÉO DO DOCKER & DOCKER COMPOSE ---
    - curtin in-target -- echo "--- 3. Instalando Docker e Docker Compose ---"
    - curtin in-target -- sudo install -m 0755 -d /etc/apt/keyrings
    - curtin in-target -- curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    - curtin in-target -- sudo chmod a+r /etc/apt/keyrings/docker.gpg
    - curtin in-target -- VERSION_CODENAME=$(lsb_release -cs)
    # A linha com 'echo' foi encapsulada para funcionar dentro do 'curtin in-target --'
    - curtin in-target -- sh -c 'echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $VERSION_CODENAME stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null'
    - curtin in-target -- apt update
    - curtin in-target -- apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    # Instalando Docker Compose V1 (para compatibilidade com scripts legados)
    - curtin in-target -- DOCKER_COMPOSE_VERSION="1.29.2"
    - curtin in-target -- sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - curtin in-target -- sudo chmod +x /usr/local/bin/docker-compose

    - curtin in-target -- sudo systemctl enable docker
    # O comando abaixo adiciona o usu√°rio 'testuser' ao grupo 'docker'
    - curtin in-target -- if ! grep -q "docker" /etc/group; then sudo groupadd docker; fi
    - curtin in-target -- sudo usermod -aG docker testuser # Usando 'testuser' em vez de '$USER'

    # --- 4. INSTALA√á√ÉO DO .NET SDK 6.0 ---
    - curtin in-target -- echo "--- 4. Instalando .NET SDK 6.0 ---"
    - curtin in-target -- DOTNET_INSTALLER_PATH="/home/testuser/dotnet-install.sh"
    - curtin in-target -- wget https://dot.net/v1/dotnet-install.sh -O "$DOTNET_INSTALLER_PATH"
    - curtin in-target -- chmod +x "$DOTNET_INSTALLER_PATH"
    # Executa como o usu√°rio 'testuser' para instalar no seu diret√≥rio home
    - curtin in-target -- runuser -l testuser -c '"$DOTNET_INSTALLER_PATH" --channel 6.0'
    - curtin in-target -- rm "$DOTNET_INSTALLER_PATH"

    # --- 5. INSTALA√á√ÉO DO NVM (Node Version Manager) e Node.js 18 ---
    - curtin in-target -- echo "--- 5. Instalando NVM e Node.js 18 ---"
    # Instala o NVM como o usu√°rio 'testuser'
    - curtin in-target -- runuser -l testuser -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash'
    
    # Configura e instala o Node.js 18 como 'testuser'. Necess√°rio carregar o NVM
    - curtin in-target -- runuser -l testuser -c 'export NVM_DIR="/home/testuser/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" && nvm install 18 && nvm use 18'

    # --- 6. INSTALA√á√ÉO DO POSTMAN ---
    - curtin in-target -- echo "--- 6. Instalando Postman ---"
    - curtin in-target -- POSTMAN_URL="https://dl.pstmn.io/download/latest/linux64"
    - curtin in-target -- POSTMAN_TAR="/home/testuser/postman.tar.gz"
    - curtin in-target -- wget "$POSTMAN_URL" -O "$POSTMAN_TAR"
    - curtin in-target -- sudo tar -xzf "$POSTMAN_TAR" -C /opt
    - curtin in-target -- sudo ln -sf /opt/Postman/Postman /usr/bin/postman
    - curtin in-target -- rm "$POSTMAN_TAR"

    # Criando o atalho .desktop (usando um bloco de estilo literal |)
    - |
      curtin in-target -- tee /usr/share/applications/postman.desktop > /dev/null << EOF
      [Desktop Entry]
      Type=Application
      Name=Postman
      Icon=/opt/Postman/app/resources/app/assets/icon.png
      Exec="/opt/Postman/Postman"
      Comment=Postman Desktop App
      Categories=Development;Code;
      EOF

    # --- 7. INSTALA√á√ÉO DO SLACK ---
    - curtin in-target -- echo "--- 7. Instalando Slack ---"
    - curtin in-target -- SLACK_URL="https://downloads.slack-edge.com/desktop-releases/linux/x64/4.46.101/slack-desktop-4.46.101-amd64.deb"
    - curtin in-target -- SLACK_DEB="/home/testuser/slack.deb"
    - curtin in-target -- wget "$SLACK_URL" -O "$SLACK_DEB"
    - curtin in-target -- sudo apt install "$SLACK_DEB" -y
    - curtin in-target -- rm "$SLACK_DEB"

    # --- 8. INSTALA√á√ÉO DO VS CODE E EXTENS√ïES ---
    - curtin in-target -- echo "--- 8. Instalando VS Code e Extens√µes ---"
    - curtin in-target -- curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > /tmp/microsoft.gpg # Usando /tmp
    - curtin in-target -- sudo install -o root -g root -m 644 /tmp/microsoft.gpg /etc/apt/keyrings/
    - curtin in-target -- sh -c 'echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
    - curtin in-target -- rm /tmp/microsoft.gpg
    - curtin in-target -- apt update
    - curtin in-target -- apt install -y code

    - curtin in-target -- echo "Instalando extens√µes do VS Code (executando como testuser)..."
    # Instalar extens√µes VS Code como 'testuser'
    # Nota: A instala√ß√£o de extens√µes dentro do late-commands pode ser problem√°tica.
    # Usaremos 'runuser' para simular a execu√ß√£o como 'testuser'.
    - curtin in-target -- runuser -l testuser -c '
        if command -v code &> /dev/null; then
            EXTENSIONS=(
                ms-dotnettools.vscode-dotnet-runtime
                ms-dotnettools.csharp
                Angular.ng-template
                johnpapa.angular2
                fernandoescolar.vscode-solution-explorer
                esbenp.prettier-vscode
                ms-dotnettools.vscodeintellicode-csharp
                dbaeumer.vscode-eslint
                rangav.vscode-thunder-client
            )
            for EXT in "${EXTENSIONS[@]}"; do
                code --install-extension "$EXT" --force
            done
        fi
    '

    # =================================================================
    # === PARTE DE VERIFICA√á√ÉO AUTOM√ÅTICA (Executada como testuser) ===
    # =================================================================
    # Nota: A verifica√ß√£o final requer vari√°veis de ambiente e a carga correta do NVM.
    # Ser√° mais est√°vel executar isso em um script separado (ou runuser) e apenas
    # mostrar as falhas b√°sicas do sistema.

    # O bloco de verifica√ß√£o √© muito complexo para ser traduzido linha por linha
    # com 'curtin in-target --'. √â mais robusto coloc√°-lo em um √∫nico script
    # e execut√°-lo com 'runuser' como o usu√°rio 'testuser'.

    - |
      curtin in-target -- tee /home/testuser/verify_tools.sh > /dev/null << 'EOF'
      #!/bin/bash
      
      echo ""
      echo "--- üîé INICIANDO VERIFICA√á√ÉO DE INSTALA√á√ÉO DE FERRAMENTAS ---"
      
      FAIL_COUNT=0
      SEPARATOR="=================================================="
      
      # Fun√ß√£o auxiliar para verificar comandos
      verify_command() {
          local command_name="$1"
          local verification_command="$2"
          local expected_output_regex="$3"
      
          echo -n "Verificando $command_name... "
          if command -v "$command_name" &> /dev/null; then
              output=$($verification_command 2>&1)
              if [[ $output =~ $expected_output_regex ]]; then
                  echo "‚úÖ [OK] (Vers√£o: $(echo "$output" | head -n 1 | awk '{print $NF}'))"
              else
                  echo "‚ö†Ô∏è [AVISO] Comando encontrado, mas a vers√£o/sa√≠da n√£o √© clara."
              fi
          else
              echo "‚ùå [FALHA] Comando n√£o encontrado."
              FAIL_COUNT=$((FAIL_COUNT + 1))
          fi
      }
      
      # 1. DBeaver CE (Verificar exist√™ncia do arquivo desktop)
      echo "$SEPARATOR"
      DOCKER_DESKTOP_VERIFY="/usr/share/applications/dbeaver-ce.desktop"
      echo -n "Verificando DBeaver CE... "
      if [ -f "$DOCKER_DESKTOP_VERIFY" ]; then
          echo "‚úÖ [OK] (Atalho .desktop encontrado)"
      else
          if [ -x "/usr/bin/dbeaver-ce" ]; then
              echo "‚ö†Ô∏è [AVISO] Atalho n√£o encontrado, mas execut√°vel DBeaver existe em /usr/bin/."
          else
              echo "‚ùå [FALHA] (Atalho ou Execut√°vel n√£o encontrado.)"
              FAIL_COUNT=$((FAIL_COUNT + 1))
          fi
      fi
      
      # 2. Docker
      echo "$SEPARATOR"
      # O Docker precisa de permiss√µes, a verifica√ß√£o simples pode falhar.
      # Usaremos a verifica√ß√£o de bin√°rio para este contexto.
      verify_command "docker" "docker --version" "Docker version"
      
      # 3. Docker Compose (Verificando o bin√°rio do v1)
      verify_command "docker-compose" "docker-compose --version" "docker-compose version"
      
      # 4. .NET SDK 6.0 (Apenas no diret√≥rio do usu√°rio)
      echo "$SEPARATOR"
      DOTNET_PATH="$HOME/.dotnet/dotnet"
      echo -n "Verificando .NET SDK 6.0 (local)... "
      if [ -x "$DOTNET_PATH" ]; then
          # A verifica√ß√£o de vers√£o √© feita fora do PATH
          VERSION_OUTPUT=$("$DOTNET_PATH" --version 2>&1 | grep -E '^(6\.|7\.|8\.)')
          if [ -n "$VERSION_OUTPUT" ]; then
              echo "‚úÖ [OK] (Vers√£o: $VERSION_OUTPUT)"
          else
              echo "‚ùå [FALHA] Execut√°vel .NET encontrado, mas a vers√£o 6.0+ n√£o foi detectada."
              FAIL_COUNT=$((FAIL_COUNT + 1))
          fi
      else
          echo "‚ùå [FALHA] Execut√°vel .NET n√£o encontrado em $DOTNET_PATH."
          FAIL_COUNT=$((FAIL_COUNT + 1))
      fi
      
      # 5. NVM e Node.js 18
      echo "$SEPARATOR"
      NVM_DIR_CHECK="$HOME/.nvm/nvm.sh"
      echo -n "Verificando NVM... "
      if [ -f "$NVM_DIR_CHECK" ]; then
          echo "‚úÖ [OK] (Script nvm.sh encontrado)"
          
          # Tenta carregar o NVM e o Node.js 18
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
      
          echo -n "Verificando Node.js 18... "
          if command -v node &> /dev/null && [[ $(node -v 2>&1) =~ v18 ]]; then
              echo "‚úÖ [OK] (Vers√£o: $(node -v 2>&1))"
          else
              echo "‚ö†Ô∏è [AVISO] Node (ou Node 18) pode n√£o estar carregado. Use 'nvm use 18' em um novo terminal."
          fi
      else
          echo "‚ùå [FALHA] NVM n√£o encontrado."
          FAIL_COUNT=$((FAIL_COUNT + 1))
      fi
      
      
      # 6. Postman
      echo "$SEPARATOR"
      POSTMAN_LINK="/usr/bin/postman"
      POSTMAN_DESKTOP_VERIFY="/usr/share/applications/postman.desktop"
      echo -n "Verificando Postman... "
      if [ -L "$POSTMAN_LINK" ] && [ -f "$POSTMAN_DESKTOP_VERIFY" ]; then
          echo "‚úÖ [OK] (Link e Atalho .desktop encontrados)"
      else
          echo "‚ùå [FALHA] Link ou Atalho .desktop n√£o encontrado."
          FAIL_COUNT=$((FAIL_COUNT + 1))
      fi
      
      # 7. Slack
      echo "$SEPARATOR"
      verify_command "slack" "slack --version" "."
      
      # 8. VS Code
      echo "$SEPARATOR"
      verify_command "code" "code --version" ".*"
      
      # Resumo Final
      echo "$SEPARATOR"
      if [ $FAIL_COUNT -eq 0 ]; then
          echo "üéâ RESULTADO FINAL: Todas as verifica√ß√µes de comandos b√°sicos foram bem-sucedidas."
      else
          echo "‚ö†Ô∏è RESULTADO FINAL: $FAIL_COUNT falha(s) detectada(s). Verifique os programas com ‚ùå."
      fi
      echo "=================================================="
      
      echo "‚ö†Ô∏è RECOMENDA√á√ÉO: Fa√ßa logout e login novamente para ativar as permiss√µes do Docker e o NVM."
      EOF

    # Executa o script de verifica√ß√£o como 'testuser'
    - curtin in-target -- chmod +x /home/testuser/verify_tools.sh
    - curtin in-target -- runuser -l testuser -c '/home/testuser/verify_tools.sh'
    
  # CORRE√á√ÉO 3: 'power-state' deve ser de n√≠vel superior
  power-state:
    delay: 5
    mode: reboot
